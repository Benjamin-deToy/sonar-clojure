<?xml version="1.0" encoding="UTF-8"?>
<rules>
    <rule>
        <key>eastwood</key>
        <name>Suggestion from Eastwood</name>
        <internalKey>eastwood</internalKey>
        <description>The suggestion is generated using Eastwood, a clojure lint tool that uses the tools.analyzer and
            tools.analyzer.jvm libraries to inspect namespaces and report possible problems.
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>kibit</key>
        <name>Suggestion from Kibit</name>
        <internalKey>kibit</internalKey>
        <description>The suggestion is generated using core.logic to search for patterns of code that could be rewritten
            with a more idiomatic function or macro.
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>ancient-clj-dependency</key>
        <name>Outdated Dependency</name>
        <internalKey>ancient-dependency</internalKey>
        <description>Dependencies can be upgraded to newer version.
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-critical</key>
        <name>Critical Vulnerability</name>
        <internalKey>nvd-critical</internalKey>
        <description>Critical severity security problem
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-high</key>
        <name>High Vulnerability</name>
        <internalKey>nvd-high</internalKey>
        <description>High severity security problem
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-medium</key>
        <name>Medium Vulnerability</name>
        <internalKey>nvd-medium</internalKey>
        <description>High severity security problem
        </description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-low</key>
        <name>Low Vulnerability</name>
        <internalKey>nvd-low</internalKey>
        <description>Low severity security problem
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>â—Š
    </rule>
    <rule>
        <key>unused-binding</key>
        <name>unused-binding</name>
        <internalKey>unused-binding</internalKey>
        <description>warn on unused binding</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>refer-all</key>
        <name>refer-all</name>
        <internalKey>refer-all</internalKey>
        <description>warns when :refer :all is used</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>unresolved-symbol</key>
        <name>unresolved-symbol</name>
        <internalKey>unresolved-symbol</internalKey>
        <description>warn on unresolved symbols</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>type-mismatch</key>
        <name>type-mismatch</name>
        <internalKey>type-mismatch</internalKey>
        <description>warn on type mismatches, e.g. passing a keyword where a number is expected</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>unused-namespace</key>
        <name>unused-namespace</name>
        <internalKey>unused-namespace</internalKey>
        <description>warns on required but unused namespace</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>invalid-arity</key>
        <name>invalid-arity</name>
        <internalKey>invalid-arity</internalKey>
        <description>warn when a function (or macro) is called with an invalid amount of arguments</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>not-a-function</key>
        <name>not-a-function</name>
        <internalKey>not-a-function</internalKey>
        <description>clj-kondo linting rule</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>private-call</key>
        <name>private-call</name>
        <internalKey>private-call</internalKey>
        <description>warn when private var is used. The name of this linter should be renamed to "private usage" since it will warn on usage of private vars and not only inside calls</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>inline-def</key>
        <name>inline-def</name>
        <internalKey>inline-def</internalKey>
        <description>warn on non-toplevel usage of def (and defn, etc.)</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>redundant-do</key>
        <name>redundant-do</name>
        <internalKey>redundant-do</internalKey>
        <description>warn on usage of do that is redundant. The warning usually arises because of an explicit or implicit do as the direct parent s-expression</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>cond-else</key>
        <name>cond-else</name>
        <internalKey>cond-else</internalKey>
        <description>warn on cond with a different constant for the else branch than :else</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>syntax</key>
        <name>syntax</name>
        <internalKey>syntax</internalKey>
        <description>warn on invalid syntax</description>
        <type>BUG</type>
    </rule>

</rules>
