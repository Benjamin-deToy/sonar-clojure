<?xml version="1.0" encoding="UTF-8"?>
<rules>

    <rule>
        <key>bad-arglists</key>
        <name>bad-arglists</name>
        <internalKey>bad-arglists</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>constant-test</key>
        <name>constant-test</name>
        <internalKey>constant-test</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>def-in-def</key>
        <name>def-in-def</name>
        <internalKey>def-in-def</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>deprecations</key>
        <name>deprecations</name>
        <internalKey>deprecations</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>implicit-dependencies</key>
        <name>implicit-dependencies</name>
        <internalKey>deprecations</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>keyword-typos</key>
        <name>keyword-typos</name>
        <internalKey>keyword-typos</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>local-shadows-var</key>
        <name>local-shadows-var</name>
        <internalKey>local-shadows-var</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>misplaced-docstrings</key>
        <name>misplaced-docstrings</name>
        <internalKey>misplaced-docstrings</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>no-ns-form-found</key>
        <name>no-ns-form-found</name>
        <internalKey>no-ns-form-found</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>non-clojure-file</key>
        <name>non-clojure-file</name>
        <internalKey>non-clojure-file</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>redefd-vars</key>
        <name>redefd-vars</name>
        <internalKey>redefd-vars</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>suspicious-expression</key>
        <name>suspicious-expression</name>
        <internalKey>suspicious-expression</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>suspicious-test</key>
        <name>suspicious-test</name>
        <internalKey>suspicious-test</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unlimited-use</key>
        <name>unlimited-use</name>
        <internalKey>unlimited-use</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-fn-args</key>
        <name>unused-fn-args</name>
        <internalKey>unused-fn-args</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-locals</key>
        <name>unused-locals</name>
        <internalKey>unused-locals</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-meta-on-macro</key>
        <name>unused-meta-on-macro</name>
        <internalKey>unused-meta-on-macro</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-namespaces</key>
        <name>unused-namespaces</name>
        <internalKey>unused-namespaces</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-private-vars</key>
        <name>unused-private-vars</name>
        <internalKey>unused-private-vars</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-ret-vals</key>
        <name>unused-ret-vals</name>
        <internalKey>unused-ret-vals</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>unused-ret-vals-in-try</key>
        <name>unused-ret-vals-in-try</name>
        <internalKey>unused-ret-vals</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>wrong-arity</key>
        <name>wrong-arity</name>
        <internalKey>wrong-arity</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>wrong-ns-form</key>
        <name>wrong-ns-form</name>
        <internalKey>wrong-ns-form</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>wrong-pre-post</key>
        <name>wrong-pre-post</name>
        <internalKey>wrong-pre-post</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>wrong-tag</key>
        <name>wrong-tag</name>
        <internalKey>wrong-tag</internalKey>
        <description>This is an example of rule defined thru the XML.
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>kibit</key>
        <name>Suggestion from Kibit</name>
        <internalKey>kibit</internalKey>
        <description>The suggestion is generated using core.logic to search for patterns of code that could be rewritten with a more idiomatic function or macro.
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>CODE_SMELL</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>2min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>ancient-clj-dependency</key>
        <name>ancient-clj-dependency</name>
        <internalKey>ancient-dependency</internalKey>
        <description>Dependencies can be upgraded to newer version.
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-critical</key>
        <name>nvd-critical</name>
        <internalKey>nvd-critical</internalKey>
        <description>Critical severity security problem
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-high</key>
        <name>nvd-high</name>
        <internalKey>nvd-high</internalKey>
        <description>High severity security problem
        </description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-medium</key>
        <name>nvd-medium</name>
        <internalKey>nvd-medium</internalKey>
        <description>High severity security problem
        </description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>
    </rule>
    <rule>
        <key>nvd-low</key>
        <name>nvd-low</name>
        <internalKey>nvd-low</internalKey>
        <description>Low severity security problem
        </description>
        <severity>MINOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <remediationFunction>CONSTANT_ISSUE</remediationFunction>
        <remediationFunctionBaseEffort>60min</remediationFunctionBaseEffort>◊
    </rule>
    <rule>
        <key>unused-binding</key>
        <name>unused-binding</name>
        <internalKey>unused-binding</internalKey>
        <description>warn on unused binding</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>refer-all</key>
        <name>refer-all</name>
        <internalKey>refer-all</internalKey>
        <description>warns when :refer :all is used</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>unresolved-symbol</key>
        <name>unresolved-symbol</name>
        <internalKey>unresolved-symbol</internalKey>
        <description>warn on unresolved symbols</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>type-mismatch</key>
        <name>type-mismatch</name>
        <internalKey>type-mismatch</internalKey>
        <description>warn on type mismatches, e.g. passing a keyword where a number is expected</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>unused-namespace</key>
        <name>unused-namespace</name>
        <internalKey>unused-namespace</internalKey>
        <description>warns on required but unused namespace</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>invalid-arity</key>
        <name>invalid-arity</name>
        <internalKey>invalid-arity</internalKey>
        <description>warn when a function (or macro) is called with an invalid amount of arguments</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>not-a-function</key>
        <name>not-a-function</name>
        <internalKey>not-a-function</internalKey>
        <description>clj-kondo linting rule</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>private-call</key>
        <name>private-call</name>
        <internalKey>private-call</internalKey>
        <description>warn when private var is used. The name of this linter should be renamed to "private usage" since it will warn on usage of private vars and not only inside calls</description>
        <type>BUG</type>
    </rule>
    <rule>
        <key>inline-def</key>
        <name>inline-def</name>
        <internalKey>inline-def</internalKey>
        <description>warn on non-toplevel usage of def (and defn, etc.)</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>redundant-do</key>
        <name>redundant-do</name>
        <internalKey>redundant-do</internalKey>
        <description>warn on usage of do that is redundant. The warning usually arises because of an explicit or implicit do as the direct parent s-expression</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>cond-else</key>
        <name>cond-else</name>
        <internalKey>cond-else</internalKey>
        <description>warn on cond with a different constant for the else branch than :else</description>
        <type>CODE_SMELL</type>
    </rule>
    <rule>
        <key>syntax</key>
        <name>syntax</name>
        <internalKey>syntax</internalKey>
        <description>warn on invalid syntax</description>
        <type>BUG</type>
    </rule>

</rules>
